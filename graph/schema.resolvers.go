package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"

	"github.com/paihari/golang-graphql-cloudcontrol/graph/model"
)

// CreateDatabase is the resolver for the createDatabase field.
func (r *mutationResolver) CreateDatabase(ctx context.Context, input model.NewDatabase) (*model.Database, error) {
	database := model.Database{
		DbName:        input.DbName,
		AdminPassword: input.AdminPassword,
	}
	// _, err := r.DB.Model(&database).Insert()
	// if err != nil {
	// 	return nil, fmt.Errorf("error inserting new database: %v", err)
	// }
	fmt.Printf("New Database Created" + input.DbName)

	return &database, nil
}

// Databases is the resolver for the databases field.
func (r *queryResolver) Databases(ctx context.Context) ([]*model.Database, error) {
	var databases []*model.Database

	// err := r.DB.Model(&databases).Select()
	// if err != nil {
	// 	return nil, err
	// }
	fmt.Printf("Listing Databases ...")
	return databases, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
